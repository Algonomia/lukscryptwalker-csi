image:
  repository: briceguillaume/lukscryptwalker-csi
  tag: "v1.0.11"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# CSI Driver configuration
csiDriver:
  name: lukscryptwalker.csi.k8s.io
  attachRequired: false
  podInfoOnMount: true  # Enable to get pod fsGroup information

# Controller configuration
controller:
  replicas: 1
  
  # Sidecar images
  sidecars:
    provisioner:
      image:
        repository: registry.k8s.io/sig-storage/csi-provisioner
        tag: v3.6.2
        pullPolicy: IfNotPresent
    resizer:
      image:
        repository: registry.k8s.io/sig-storage/csi-resizer  
        tag: v1.9.2
        pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Node configuration  
node:
  # Sidecar images
  sidecars:
    nodeDriverRegistrar:
      image:
        repository: registry.k8s.io/sig-storage/csi-node-driver-registrar
        tag: v2.9.2
        pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}
  tolerations:
    - operator: Exists
  affinity: {}

# Storage configuration
storage:
  # Default local path for volumes (overrides hardcoded fallback)
  defaultPath: "/opt/local-path-provisioner"
  
  # Default size for backing files
  defaultSize: "1Gi"

# LUKS secret configuration (shared by all StorageClasses by default)
secret:
  name: luks-secret
  namespace: kube-system
  # Auto-create secret with random passphrase
  create: true
  # If create is false, provide your own passphrase (base64 encoded)
  passphrase: ""
  # Key name within the secret that contains the passphrase
  passphraseKey: "passphrase"

# StorageClasses configuration - all StorageClasses are defined here
storageClasses:
  # Default StorageClass with automatic fsGroup detection
  - name: lukscryptwalker-local
    isDefault: false
    reclaimPolicy: Delete
    allowVolumeExpansion: true
    volumeBindingMode: WaitForFirstConsumer
    # fsGroup: null  # Auto-detect from pod (default behavior)
    secret:
      name: luks-secret
      namespace: kube-system
      passphraseKey: "passphrase"
  
  # Example configurations for different database types
  # Uncomment and customize as needed
  
  # - name: lukscryptwalker-postgres
  #   isDefault: false
  #   reclaimPolicy: Delete
  #   allowVolumeExpansion: true
  #   volumeBindingMode: WaitForFirstConsumer
  #   fsGroup: 26  # PostgreSQL group
  #   secret:
  #     name: luks-secret
  #     namespace: kube-system
  #     passphraseKey: "passphrase"
  
  # - name: lukscryptwalker-mysql
  #   isDefault: false
  #   reclaimPolicy: Delete
  #   allowVolumeExpansion: true
  #   volumeBindingMode: WaitForFirstConsumer
  #   fsGroup: 999  # MySQL group
  #   secret:
  #     name: luks-secret
  #     namespace: kube-system
  #     passphraseKey: "passphrase"
  
  # - name: lukscryptwalker-custom
  #   isDefault: false
  #   reclaimPolicy: Delete
  #   allowVolumeExpansion: true
  #   volumeBindingMode: WaitForFirstConsumer
  #   fsGroup: 1001  # Custom application group
  #   secret:
  #     name: custom-luks-secret
  #     namespace: kube-system
  #     passphraseKey: "encryption-key"

# RBAC configuration
rbac:
  create: true

# ServiceAccount configuration  
serviceAccount:
  controller:
    create: true
    name: lukscryptwalker-csi-controller
    annotations: {}
  node:
    create: true
    name: lukscryptwalker-csi-node
    annotations: {}

# Security context
securityContext:
  # Controller runs as non-privileged
  controller:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
  # Node must run privileged for LUKS operations
  node:
    privileged: true
    runAsUser: 0
    runAsGroup: 0
    allowPrivilegeEscalation: true
    capabilities:
      add: ["SYS_ADMIN"]

# Pod security context (for pod-level settings like fsGroup)
podSecurityContext:
  controller: {}  # No fsGroup needed - directories are created with 0777 permissions
  node: {}

# Logging
logging:
  level: 4

# Node selector for deployment
nodeSelector: {}

# Tolerations
tolerations: []

# Pod annotations
podAnnotations: {}
